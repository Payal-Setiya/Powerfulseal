apiVersion: v1
kind: ConfigMap
metadata:
  name: sealpolicy
  namespace: powerfulseal
data:
  policy.yml: |-
    scenarios:
    - name: Count pods with a specific label.
      steps:
      - podAction:
          matches:
            - labels:
                namespace: "powerfulseal"
                selector: important=true
          actions:
            - checkPodCount:
                count: 0
    - name: Kill the pod and restart it.
      steps:
      - podAction:
          matches:
            - namespace: "emojivoto"
          filters:
            - randomSample:
               size: 1
          actions:
            - kill:
                force: true

      - wait:
          seconds: 30
      - podAction:
          matches:
            - namespace: "emojivoto"
          actions:
            - checkPodState:
                state: Running
            - checkPodCount:
                count: 6
    - name: Verify there only running pods
      steps:
      - podAction:
          matches:
            - namespace: emojivoto
          filters:
            # pods not running
            - property:
                name: state
                value: Running
                negative: true
            - randomSample:
                size: 1
          actions:
            - checkPodCount:
                count: 6
    - name: Stop that host!
      steps:
      - podAction:
          matches:
            - namespace: emojivoto
          filters:
            - randomSample:
                size: 1
          actions:
            - stopHost:
                autoRestart: true
      - wait:
          seconds: 30
    - name: Test deployment SLO
      description: >
      steps:
      - kubectl:
          autoDelete: true
          action: apply
          payload: |
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: jira
              namespace: jira
            spec:
             selector:
               matchLabels:
                 name: jira
             replicas: 1
             template:
               metadata:
                 labels:
                   name: jira
               spec:
                 containers:
                   - name: jira
                     image: atlassian/jira-software
                     ports:
                      - containerPort: 8080


            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: jira
              namespace: jira
            spec:
              type: NodePort
              ports:
                - port: 8080
                  targetPort: 8080
                  nodePort: 30081
              selector:
                name: jira
      - wait:
          seconds: 30
      - probeHTTP:
          target:
            service:
              name: jira
              namespace: jira
              port: 8080
              protocol: http
